// ## Time and Space complexity analysis
// ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá ‚Äî ‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡¶¨ **Big O Notation**, **Time Complexity**, ‡¶Ü‡¶∞ **Space Complexity** ‚Äî ‡¶∏‡¶æ‡¶•‡ßá **JavaScript ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£‡¶∏‡¶π**‡•§

// ---

// ## **1. Big O Notation ‡¶ï‡ßÄ?**

// **Big O Notation** ‡¶π‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ó‡¶æ‡¶£‡¶ø‡¶§‡¶ø‡¶ï ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶Ø‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ **‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶ó‡¶∞‡¶ø‡¶¶‡¶Æ ‡¶ï‡¶§ ‡¶∏‡¶Æ‡ßü ‡¶ì ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶ñ‡¶∞‡¶ö ‡¶ï‡¶∞‡¶¨‡ßá** ‡¶∏‡ßá‡¶ü‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶ø, **‡¶á‡¶®‡¶™‡ßÅ‡¶ü‡ßá‡¶∞ ‡¶∏‡¶æ‡¶á‡¶ú ‡¶¨‡¶æ‡ßú‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá**‡•§

// ‡¶è‡¶ü‡¶æ ‡¶Æ‡ßÇ‡¶≤‡¶§ **Worst Case Scenario** ‡¶¨‡ßã‡¶ù‡¶æ‡ßü‡•§

// üìå ‡¶∏‡¶π‡¶ú ‡¶≠‡¶æ‡¶∑‡¶æ‡ßü:

// > ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶Ø‡¶§ ‡¶¨‡ßú ‡¶π‡¶¨‡ßá, ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ï‡¶§ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ (‡¶¨‡¶æ ‡¶ß‡ßÄ‡¶∞‡ßá) ‡¶ö‡¶≤‡¶¨‡ßá, ‡¶∏‡ßá‡¶ü‡¶æ‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶Æ‡¶æ‡¶™‡•§

// ---

// ## **2. Time Complexity (‡¶∏‡¶Æ‡ßü ‡¶ú‡¶ü‡¶ø‡¶≤‡¶§‡¶æ)**

// ‡¶è‡¶ü‡¶æ ‡¶¨‡ßã‡¶ù‡¶æ‡ßü, ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶∏‡¶æ‡¶á‡¶ú (`n`) ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ **‡¶ï‡¶§‡¶¨‡¶æ‡¶∞ ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶ö‡¶≤‡¶õ‡ßá**‡•§

// ### ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ Time Complexity-‡¶è‡¶∞ ‡¶ß‡¶∞‡¶®‡¶ó‡ßÅ‡¶≤‡ßã:

// | Complexity     | ‡¶®‡¶æ‡¶Æ               | ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£                              |
// | -------------- | ----------------- | ----------------------------------- |
// | **O(1)**       | Constant Time     | Array ‡¶•‡ßá‡¶ï‡ßá index ‡¶¶‡¶ø‡ßü‡ßá element ‡¶®‡ßá‡¶ì‡ßü‡¶æ |
// | **O(log n)**   | Logarithmic Time  | Binary Search                       |
// | **O(n)**       | Linear Time       | Array traverse                      |
// | **O(n log n)** | Linearithmic Time | Merge Sort, Quick Sort              |
// | **O(n¬≤)**      | Quadratic Time    | Nested loop                         |
// | **O(2‚Åø)**      | Exponential Time  | Recursive Fibonacci                 |
// | **O(n!)**      | Factorial Time    | Travelling Salesman Problem         |

// ---

// ### **JavaScript ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£**

// **O(1) ‚Äì Constant Time**

// javascript
let arr1 = [10, 20, 30, 40];
console.log(arr1[2]);

// ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü ‡¶è‡¶ï ‡¶ß‡¶æ‡¶™‡ßá ‡¶ï‡¶æ‡¶ú ‡¶∂‡ßá‡¶∑ ‡¶π‡¶¨‡ßá

// O(n) ‚Äì Linear Time

let arr = [1, 2, 3, 4, 5];
for (let i = 0; i < arr.length; i++) {
  console.log(arr[i]); // ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶Ø‡¶§ ‡¶¨‡ßú ‡¶π‡¶¨‡ßá, ‡¶§‡¶§ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶≤‡ßÅ‡¶™ ‡¶ö‡¶≤‡¶¨‡ßá
}
// O(n¬≤) ‚Äì Quadratic Time**

// ```javascript
let arr3 = [1, 2, 3];
for (let i = 0; i < arr3.length; i++) {
  for (let j = 0; j < arr3.length; j++) {
    console.log(arr3[i], arr3[j]); // Nested loop ‚Üí O(n¬≤)
  }
}

// #### **O(log n) ‚Äì Logarithmic Time (Binary Search)**

// ```javascript
function binarySearch(arr, target) {
  let left = 0,
    right = arr.length - 1;
  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) return mid;
    if (arr[mid] < target) left = mid + 1;
    else right = mid - 1;
  }
  return -1;
}
console.log(binarySearch([1, 2, 3, 4, 5, 6, 7, 8], 6));

// ## **3. Space Complexity (‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶ú‡¶ü‡¶ø‡¶≤‡¶§‡¶æ)**

// ‡¶è‡¶ü‡¶æ ‡¶¨‡ßã‡¶ù‡¶æ‡ßü, ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶∏‡¶Æ‡ßü **‡¶ï‡¶§ ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶≤‡¶æ‡¶ó‡¶õ‡ßá**‡•§

// üìå Space Complexity-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶•‡¶æ‡¶ï‡ßá:

// * **Variable**
// * **Data Structure**
// * **Function Call Stack**
// * **Recursion**

// ---

// ### **Space Complexity ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£**

// O(1) ‚Äì Constant Space

//javascript
function sum(a, b) {
  return a + b; // ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶´‡¶ø‡¶ï‡ßç‡¶∏‡¶°
}

// #### **O(n) ‚Äì Linear Space**

function createArray(n) {
  let arr = [];
  for (let i = 0; i < n; i++) {
    arr.push(i);
  }
  return arr; // ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶Ø‡¶§ ‡¶¨‡ßú ‡¶π‡¶¨‡ßá, ‡¶§‡¶§ ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá
}

// #### **O(n) ‚Äì Recursion Space**

function factorial(n) {
  if (n === 1) return 1;
  return n * factorial(n - 1); // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤ stack-‡¶è ‡¶Ø‡ßã‡¶ó ‡¶π‡¶ö‡ßç‡¶õ‡ßá
}

// ## **4. Time vs Space Trade-off**

// ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡¶Æ‡ßü **‡¶∏‡¶Æ‡ßü ‡¶¨‡¶æ‡¶Å‡¶ö‡¶æ‡¶§‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø** ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü, ‡¶Ü‡¶¨‡¶æ‡¶∞ **‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶¨‡¶æ‡¶Å‡¶ö‡¶æ‡¶§‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∏‡¶Æ‡ßü** ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡•§

// üìå ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:

// * **Hash Table** ‚Üí ‡¶¨‡ßá‡¶∂‡¶ø ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶≤‡¶æ‡¶ó‡¶≤‡ßá‡¶ì ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ñ‡ßÅ‡¶¨ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶π‡ßü (**O(1)**)
// * **Bubble Sort** ‚Üí ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶ï‡¶Æ ‡¶≤‡¶æ‡¶ó‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶∏‡¶Æ‡ßü ‡¶¨‡ßá‡¶∂‡¶ø ‡¶≤‡¶æ‡¶ó‡ßá (**O(n¬≤)**)

// ---

//5. Common Big O Chart (‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶¨‡¶æ‡ßú‡¶≤‡ßá ‡¶ï‡ßá‡¶Æ‡¶® ‡¶ó‡ßç‡¶∞‡ßã ‡¶ï‡¶∞‡ßá)**

// O(1)         ‚Üí ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü ‡¶è‡¶ï‡¶á ‡¶∏‡¶Æ‡ßü
// O(log n)     ‚Üí ‡¶ß‡ßÄ‡¶∞‡ßá ‡¶¨‡¶æ‡ßú‡ßá
// O(n)         ‚Üí ‡¶∏‡¶∞‡¶≤‡¶∞‡ßá‡¶ñ‡¶æ ‡¶π‡¶æ‡¶∞‡ßá ‡¶¨‡¶æ‡ßú‡ßá
// O(n log n)   ‚Üí ‡¶Æ‡¶æ‡¶ù‡¶æ‡¶∞‡¶ø ‡¶π‡¶æ‡¶∞‡ßá ‡¶¨‡¶æ‡ßú‡ßá
// O(n¬≤)        ‚Üí ‡¶ñ‡ßÅ‡¶¨ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶¨‡¶æ‡ßú‡ßá
// O(2‚Åø) / O(n!)‚Üí ‡¶¨‡¶ø‡¶∏‡ßç‡¶´‡ßã‡¶∞‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶æ‡ßú‡ßá
// ```

// ‡¶Ü‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø **Big O Complexity-‡¶è‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶ø‡¶ú‡ßç‡¶Ø‡ßÅ‡ßü‡¶æ‡¶≤ ‡¶ö‡¶æ‡¶∞‡ßç‡¶ü** ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø complexity ‡¶ï‡ßá‡¶Æ‡¶® ‡¶¨‡¶æ‡ßú‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶ó‡ßç‡¶∞‡¶æ‡¶´ ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá, ‡¶Ü‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø‡¶∞ JavaScript animation example ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§

// ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶ø ‡¶ö‡¶æ‡¶ì ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶á?
