// ## underStanding binary search trees, traversals, and balanced trees
// ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá ‚Äî ‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡¶¨ **Binary Tree**, **Binary Search Tree (BST)**, **Traversal methods**, ‡¶è‡¶¨‡¶Ç **Balanced Tree** ‚Äî ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ **JavaScript** ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£‡¶∏‡¶π‡•§

// ---

// ## **1. Binary Tree ‡¶ï‡ßÄ?**

// Binary Tree ‡¶π‡¶≤‡ßã ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞ ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá **‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶®‡ßã‡¶°‡ßá‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø child ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá**:

// * **Left Child**
// * **Right Child**

//  ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:

```
      10
     /  \
    5    15
   / \     \
  2   7     20


// ## **2. Binary Search Tree (BST) ‡¶ï‡ßÄ?**

// BST ‡¶π‡¶≤‡ßã Binary Tree-‡¶è‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶ß‡¶∞‡¶® ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá:

// 1. **Left Subtree** ‡¶è‡¶∞ ‡¶∏‡¶¨ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ **root-‡¶è‡¶∞ ‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶õ‡ßã‡¶ü**‡•§
// 2. **Right Subtree** ‡¶è‡¶∞ ‡¶∏‡¶¨ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ **root-‡¶è‡¶∞ ‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶¨‡¶°‡¶º**‡•§
// 3. ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø subtree ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶®‡¶ø‡¶ú‡ßá‡¶ì BST‡•§

üìå ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:


      8
     / \
    3   10
   / \     \
  1   6     14
     / \    /
    4   7  13
```;
// ## **3. JavaScript-‡¶è BST ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ**

// javascript
class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

class BinarySearchTree {
  constructor() {
    this.root = null;
  }

  // Insert Method
  insert(value) {
    const newNode = new Node(value);
    if (this.root === null) {
      this.root = newNode;
      return this;
    }
    let current = this.root;
    while (true) {
      if (value < current.value) {
        if (!current.left) {
          current.left = newNode;
          return this;
        }
        current = current.left;
      } else {
        if (!current.right) {
          current.right = newNode;
          return this;
        }
        current = current.right;
      }
    }
  }
}

// ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
const bst = new BinarySearchTree();
bst.insert(8);
bst.insert(3);
bst.insert(10);
bst.insert(1);
bst.insert(6);
bst.insert(14);
bst.insert(4);
bst.insert(7);
bst.insert(13);

console.log(JSON.stringify(bst, null, 2));

// ## **4. Tree Traversals**

// Traversal ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶≤‡ßã ‡¶ó‡¶æ‡¶õ‡ßá‡¶∞ (Tree) ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶®‡ßã‡¶° ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡•§

// ### **(A) Depth First Search (DFS)**

// **Types:**

// 1. **Pre-Order** ‚Üí Root ‚Üí Left ‚Üí Right
// 2. **In-Order** ‚Üí Left ‚Üí Root ‚Üí Right
// 3. **Post-Order** ‚Üí Left ‚Üí Right ‚Üí Root

// javascript
// In-order Traversal
function inOrder(node) {
  if (node) {
    inOrder(node.left);
    console.log(node.value);
    inOrder(node.right);
  }
}

// Pre-order Traversal
function preOrder(node) {
  if (node) {
    console.log(node.value);
    preOrder(node.left);
    preOrder(node.right);
  }
}

// Post-order Traversal
function postOrder(node) {
  if (node) {
    postOrder(node.left);
    postOrder(node.right);
    console.log(node.value);
  }
}

inOrder(bst.root); // 1 3 4 6 7 8 10 13 14
// ```

// ### **(B) Breadth First Search (BFS)**

// Level by level ‡¶ü‡ßç‡¶∞‡¶æ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶æ‡¶≤ (queue ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá):

// javascript
function bfs(root) {
  let queue = [];
  queue.push(root);

  while (queue.length > 0) {
    let current = queue.shift();
    console.log(current.value);
    if (current.left) queue.push(current.left);
    if (current.right) queue.push(current.right);
  }
}

bfs(bst.root); // 8 3 10 1 6 14 4 7 13

// ## **5. Balanced Tree**

// Balanced Tree ‡¶π‡¶≤‡ßã ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø tree ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá left ‡¶è‡¶¨‡¶Ç right subtree-‡¶è‡¶∞ height ‡¶™‡¶æ‡¶∞‡ßç‡¶•‡¶ï‡ßç‡¶Ø **‡ßß-‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶®‡¶æ**‡•§

// üìå Balanced Tree ‡¶•‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ:

// * ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö, ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü, ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü **O(log n)** ‡¶ü‡¶æ‡¶á‡¶Æ‡ßá ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡•§
// * Unbalanced Tree ‡¶π‡¶≤‡ßá worst case ‡¶è **O(n)** ‡¶π‡¶Ø‡¶º‡ßá ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá (‡¶Ø‡ßá‡¶Æ‡¶® ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã)‡•§

// üìå ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:

// **Balanced:**

// ```
//       8
//      / \
//     4   12
//    / \  / \
//   2  6 10 14
// ```

// **Unbalanced:**

// ```
// 1
//  \
//   2
//    \
//     3
//      \
//       4
// ```

// ---

// ‡¶Ü‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º **Binary Search Tree-‡¶è‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶≠‡¶ø‡¶ú‡ßç‡¶Ø‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ì ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶®** ‡¶¨‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü, ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö, ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶ü‡ßç‡¶∞‡¶æ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶æ‡¶≤ ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá‡•§
// ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶ø ‡¶ö‡¶æ‡¶ì ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶á?
