// Binary Search ржХрзА?
// Binary Search рж╣рж▓рзЛ ржПржоржи ржПржХржЯрж┐ searching algorithm ржпрж╛ sorted array рждрзЗ ржЦрзБржм ржжрзНрж░рзБржд ржХрзЛржирзЛ element ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗред

// ржПржЯрж┐ ржмрж╛рж░ржмрж╛рж░ array ржХрзЗ ржжрзБржЗ ржнрж╛ржЧрзЗ ржнрж╛ржЧ ржХрж░рзЗ search ржХрж░рзЗред

// Time Complexity: O(log n)

// рж╢рж░рзНржд: Array ржЕржмрж╢рзНржпржЗ ascending order (ржмрж╛ descending order) ржП sort ржХрж░рж╛ ржерж╛ржХрждрзЗ рж╣ржмрзЗред

// ЁЯУМ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржХрж╛ржЬрзЗрж░ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛
// рж╢рзБрж░рзБ: array ржПрж░ ржкрзНрж░ржержо index (low) ржПржмржВ рж╢рзЗрж╖ index (high) ржарж┐ржХ ржХрж░рзЛред

// ржорж╛ржЭржЦрж╛ржи: mid = Math.floor((low + high) / 2) ржмрзЗрж░ ржХрж░рзЛред

// ржпржжрж┐ arr[mid] == target тЖТ element ржкрзЗржпрж╝рзЗ ржЧрзЗржЫрж┐ред

// ржпржжрж┐ arr[mid] < target тЖТ element ржбрж╛ржиржжрж┐ржХрзЗ ржЖржЫрзЗ тЖТ low = mid + 1 ржХрж░рзЛред

// ржпржжрж┐ arr[mid] > target тЖТ element ржмрж╛ржоржжрж┐ржХрзЗ ржЖржЫрзЗ тЖТ high = mid - 1 ржХрж░рзЛред

// ржПржнрж╛ржмрзЗ low <= high ржерж╛ржХрж╛ ржкрж░рзНржпржирзНржд рж▓рзБржк ржЪрж▓ржмрзЗред

function binarySearch(arr, target) {
  let low = 0;
  let high = arr.length - 1;
  while (low <= high) {
    let mid = Math.floor((low + high) / 2);
  }
  if (arr[mid] === target) {
    return mid;
  }
  if (arr[mid] < target) {
    low = mid + 1;
  } else {
    high = mid - 1;
  }
  return -1;
}
let numbers = [1, 3, 5, 7, 9, 11, 13];
let target = 7;
let result = binarySearch(numbers, target);
if (result !== -1) {
  console.log(`element ${target} paoya gese index ${result} a`);
} else {
  console.log(`Element ${target} paoya jay ni`);
}
